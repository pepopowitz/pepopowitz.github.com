<!DOCTYPE html><html lang="en"><head><title>Steven J Hicks</title><link rel="stylesheet" href="/static/css/site.css"></head><body><nav class="navbar navbar-inverse navbar-fat navbar-default navbar-static-top"><div class="container-fluid"><div class="navbar-header"><a href="/" class="navbar-brand">SJH</a><a href="/about" class="navbar-brand">About</a><a href="/presentations" class="navbar-brand">Presentations</a></div></div></nav><div class="container"><div class="row">      <article><div class="jumbotron"><h1>pleepleus88.github.io</h1><h2>Steven Hicks</h2><div class="lead">Crushing 1s and 0s since 1999.</div></div><div class="row"><div class="col-lg-6"><div class="well"><h4>Things I like</h4><ul><li>Solving problems</li><li>Clean code</li><li>Readability</li><li>Maintainability</li><li>TDD</li></ul></div></div><div class="col-lg-6"><div class="well"><h4>Things I know</h4><ul><li>C#</li><li>JS</li><li>SQL</li><li>How to solve a problem</li><li>That there are a lot of things I don't know</li></ul></div></div></div><div class="row"><div class="col-lg-12"><div class="well"><h4>Things I believe</h4><ul><li>Code is communication. Between you and the compiler, but more importantly between you and the next person to read the code. Write code for them to read, not you. </li><li>Clean code is simple, elegant, clear, and readable. Dirty code is difficult to read, stressful, expensive to maintain, and error prone. Strive for clean code, even if it is only one method at a time.</li><li>Comments don't excuse tricky code. Rather than explaining difficult logic with 5 lines of comments, extract the trickiness to a descriptively named method or variable, and let the code document itself.</li><li>Follow the "boy scout rule". Always leave the code cleaner and easier to read than when you found it.</li><li>As developers, we spend a lot of time trying to make things small. The length of a variable name should not be one of those things. Short names are generally ambiguous, longer names are generally more clear.</li><li>Code should read more like a choose your own adventure book, and less like War and Peace. When a method or class grows too large, break it into smaller pieces. There's no exact definition on what is "too large", but if you're scrolling to read one method, that's a hint.</li><li>Comments lie. Your IDE's refactoring tools don't keep them up to date, and you don't either - once you understand a piece of code, you never even read the comments anymore. Use comments sparingly, and only if they are truly adding value.</li></ul></div></div></div><footer> <h6>I built this site with <a href="http://www.metalsmith.io/">metalsmith.io.</a></h6></footer></article></div></div></body></html>