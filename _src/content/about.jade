---
title: About - Steven J Hicks
date: February 11, 2017
layout: home.jade
---

.row
  .col-lg-12
    .row
      .col-lg-12
        h1 About Me
    .row
      .col-lg-9
        p I am a web developer with nearly 20 years experience. I like using the right tool for the right job, especially if it is JavaScript. I am an advocate of TDD, clean code, and writing maintainable software.
        p My current passion is technical speaking. I love sharing my experiences with others at meetups and conferences. I have long enjoyed speaking at work, but in late 2015 I built the courage to speak outside of work, and I haven't looked back.
        p As much as I love development, I love the outdoors even more. I am outside almost the entire time from April to November. If I didn't live in Wisconsin, I would be outside all of the other months too.
        p Summers are spent swimming or camping with my wife and kids, training for and doing triathlons, mountain biking, and running. Winters are spent waiting for the right conditions to sled, snowboard, or cross country ski, and climbing indoors.
      .col-lg-3.bio
        img.img-circle.avatar(src='/static/images/avatar.jpg')
        br
        a(href="https://twitter.com/pepopowitz") https://twitter.com/pepopowitz
        br
        a(href="https://www.linkedin.com/in/stevenjhicks") https://www.linkedin.com/in/stevenjhicks
.row
  .col-lg-12
    hr
.row
  .col-lg-6
    .well
      h4 Things I like
      ul
        li Solving problems
        li Clean code
        li Readability
        li Maintainability
        li TDD
  .col-lg-6
    .well
      h4 Things I know
      ul
        li C#
        li JS
        li SQL
        li How to solve a problem
        li That there are a lot of things I don't know
.row
  .col-lg-12
    .well
      h4 Things I believe
      ul
        li Code is communication. Between you and the compiler, but more importantly between you and the next person to read the code. Write code for them to read, not you.
        li Clean code is simple, elegant, clear, and readable. Dirty code is difficult to read, stressful, expensive to maintain, and error prone. Strive for clean code, even if it is only one method at a time.
        li Comments don't excuse tricky code. Rather than explaining difficult logic with 5 lines of comments, extract the trickiness to a descriptively named method or variable, and let the code document itself.
        li Follow the "boy scout rule". Always leave the code cleaner and easier to read than when you found it.
        li As developers, we spend a lot of time trying to make things small. The length of a variable name should not be one of those things. Short names are generally ambiguous, longer names are generally more clear.
        li Code should read more like a choose your own adventure book, and less like War and Peace. When a method or class grows too large, break it into smaller pieces. There's no exact definition on what is "too large", but if you're scrolling to read one method, that's a hint.
        li Comments lie. Your IDE's refactoring tools don't keep them up to date, and you don't either - once you understand a piece of code, you never even read the comments anymore. Use comments sparingly, and only if they are truly adding value.